plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
View(routes)
View(routes)
head(routes)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat")
airports <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat")
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
View(airports)
airports <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat", header = FALSE)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
?read.csv
head(airports)
head(airports)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
> points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = 1)
points(airports$lon, airports$lat, col = "red", cex = .3)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .3)
points(airports$lon, airports$lat, col = "red", cex = .6)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .6)
departures <- ddply(routes, .(sourceAirportID), "nrow")
library("plyr", lib.loc="~/R/win-library/3.2")
?ddply
departures <- ddply(routes, .(sourceAirportID), "nrow")
View(routes)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes", header = FALSE)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat", header = FALSE)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
View(routes)
departures <- ddply(routes, .(sourceAirportID), "nrow")
View(departures)
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
View(arrivals)
View(departures)
names(departures)[2] <- "flights"
names(arrivals)[2] <- "flights"
View(arrivals)
airportD <- merge(airports, departures, by.x = "ID", by.y = "sourceAirportID")
airportA <- merge(airports, arrivals, by.x = "ID", by.y = "destinationAirportID")
View(airportA)
View(airportD)
View(airportD)
map <- get_map(location = 'Europe', zoom = 4)
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
?scale_size_area
mapPointsLegend <- mapPoints +
scale_size_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = (flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_size_area(breaks = (c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_size_area(breaks = (c(sqrt(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend <- mapPoints +
scale_size_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
> points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
View(df_pop_state)
View(routes)
View(routes) #views routes
?ddply
?GeomPoint
?geom_point
mapPointsLegend
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
data("df_japan_census")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
View(df_japan_census)
View(df_japan_census)
df_japan_census$value=df_japan_census$pop_2010
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
admin1_choropleth(country.name = "japan",
legend       = "Population")
admin1_choropleth(country.name = "japan",
title        = "2010 Japan Population Estimates",
legend       = "Population")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
admin1_choropleth(country.name = "japan",
legend       = "Population")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
legend       = "Population")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
zip_choropleth(df_pop_zip, state_zoom="hawaii", title="2012 Hawaii State ZCTA Population EStimates", legend="Population")
zip_choropleth(df_pop_zip, state_zoom="hawaii", title="2012 Hawaii State ZCTA Population EStimates", legend="Population")
view county.fips.numeric
data county.fips.numeric
county.fips.numeric
data (county.fips.numeric)
data("county.regions")
View(county.regions)
View(county.regions)
zip_choropleth(df_pop_zip, county_zoom="15003", title="2012 Honolulu ZCTA Population EStimates", legend="Population")
library("choroplethr", lib.loc="~/R/win-library/3.2")
install.packages(c("acepack", "acs", "assertthat", "BH", "choroplethr", "choroplethrAdmin1", "choroplethrMaps", "colorspace", "curl", "DBI", "devtools", "digest", "dplyr", "evaluate", "fields", "geosphere", "ggmap", "ggplot2", "git2r", "gridExtra", "gtable", "Hmisc", "httr", "jsonlite", "latticeExtra", "lazyeval", "maps", "maptools", "memoise", "mgcv", "mime", "munsell", "plyr", "proto", "R6", "Rcpp", "reshape2", "RgoogleMaps", "roxygen2", "rstudioapi", "rversions", "scales", "sp", "spam", "stringi", "stringr", "withr", "XML", "xml2"))
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("WDI", lib.loc="~/R/win-library/3.2")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
install.packages("rgdal")
update()
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
install.packages(c("choroplethr", "choroplethrAdmin1", "choroplethrMaps"))
library("choroplethr", lib.loc="~/R/win-library/3.3")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("WDI", lib.loc="~/R/win-library/3.3")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethr", lib.loc="~/R/win-library/3.3")
library("choroplethr", lib.loc="~/R/win-library/3.3")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
m1 = tract_choropleth(manhattan_2010, "new york", legend = "Dollars", county_zoom = 36061)
m2 = tract_choropleth(manhattan_2010, "new york", legend = "Dollars", county_zoom = 36061, reference_map = TRUE)
r.version
r.version()\
r.version()
R.Version()
update.packages()
update.packages()
install.packages("gpclib")
packages = c("gpclib",
"rgdal",
"maptools",
"dplyr",
"ggplot2")
packages = packages[!(packages %in% installed.packages()[,"Package"])]
if (length(packages) > 0)
{
install.packages(packages)
}
install.packages("gpclib")
install_version("gpclib", version = "1.4", repos = "http://cran.us.r-project.org")
install.packages("devtools")
install_version("gpclib", version = "1.4", repos = "http://cran.us.r-project.org")
library("devtools", lib.loc="~/R/win-library/3.3")
install_version("gpclib", version = "1.4", repos = "http://cran.us.r-project.org")
install.packages("gpclib")
library("rgdal", lib.loc="~/R/win-library/3.3")
setwd(C:\Users\beales\Desktop\Arimaps\SupervisorialDistrictsasofApril2012-1459894693024)
setwd("C:\Users\beales\Desktop\Arimaps\SupervisorialDistrictsasofApril2012-1459894693024")
setwd("~Desktop/Arimaps/SupervisorialDistrictsasofApril2012-1459894693024")
getwd()
setwd("C:/Users/beales/Desktop/Arimaps/SupervisorialDistrictsasofApril2012")
getwd()
sf = readOGR(dsn=".", layer="geo_export_167e4320-87af-4efb-904f-3eee8b9c2239")
class(sf)
plot(sf)
sf@data$id = rownames(sf@data)
remove(sf)
sf = readOGR(dsn=".", layer="geo_export_167e4320-87af-4efb-904f-3eee8b9c2239")
sf@data$id = rownames(sf@data)
head(sf)
sf = readOGR(dsn=".", layer="geo_export_167e4320-87af-4efb-904f-3eee8b9c2239")
head(sf)
sf@data$id = rownames(sf@data)
sf.points = fortify(sf, region="id")
library("plyr", lib.loc="~/R/win-library/3.3")
sf.points = fortify(sf, region="id")
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("gpclib", lib.loc="~/R/win-library/3.3")
library("maptools", lib.loc="~/R/win-library/3.3")
sf.points = fortify(sf, region="id")
?fortify()
sf.df = inner_join(sf.points, sf@data, by="id")
??inner_join
library("dplyr", lib.loc="~/R/win-library/3.3")
sf.df = inner_join(sf.points, sf@data, by="id")
head(sf.df)
ggplot(sf.df) + aes(long,lat,group-group) + geom_polygon()
View(sf.points)
View(sf.points)
View(sf.df)
View(sf.df)
View(sf.points)
View(sf.df)
ggplot(sf.df)
ggplot(sf.df) + aes(long,lat,group-group)
ggplot(sf.df) + aes(long,lat,group-group) + geom_polygon()
ggplot(sf.df) + geom_polygon()
ggplot(sf.df) + geom_polygon(aes(long,lat,group-group))
remove(sf.df)
remove(sf)
remove(sf.points)
remove(packages)
remove(country.map, df_county_demographics, df_japan_census, df_pop_county, df_pop_state, df_pop_zip)
sf = readOGR(dsn=".", layer="geo_export_167e4320-87af-4efb-904f-3eee8b9c2239")
plot(sf)
gcplibPermit()
gpclibPermit()
sf@data$id = rownames(sf@data)
sf.points = fortify(sf, region="id")
sf.df = inner_join(sf.points, sf@data, by="id")
head(sf)
sf.df = inner_join(sf.points, sf@data, by="id")
head(sf)
head(sf.df)
ggplot(sf.df) + aes(long,lat,group=group) + geom_polygon()
head(sf.df)
district3 = sf.df[sf.df$supervisor ==3, ]
ggplot(district3) + aes(long,lat,group=group) + geom_polygon()
head(district3)
theme_clean = function()
{
theme(
axis.title        = element_blank(),
axis.text         = element_blank(),
panel.background  = element_blank(),
panel.grid        = element_blank(),
axis.ticks.length = unit(0, "cm"),
panel.margin      = unit(0, "lines"),
plot.margin       = unit(c(0, 0, 0, 0), "lines"),
complete          = TRUE
)
}
ggplot(district3) + aes(long,lat,group=group) + geom_polygon() + ggtitle("SF Districts"") + theme_clean()
ggplot(sf.df) +
aes(long,lat,group=group) +
geom_polygon() +
ggtitle("San Francisco Supervisor Districts") +
theme_clean()
ggplot(sf.df) + aes(long,lat,group=group) + geom_polygon() + ggtitle("San Francisco Supervisor Districts") + theme_clean()
library("mapproj", lib.loc="~/R/win-library/3.3")
library("choroplethrMaps", lib.loc="~/R/win-library/3.3")
library("gridExtra", lib.loc="~/R/win-library/3.3")
?coord_map
data("state.map")
default = ggplot(state.map) +
aes(long, lat, group=group) +
geom_polygon() +
ggtitle("Default Projection")
mercator = ggplot(state.map) +
aes(long, lat, group=group) +
geom_polygon() +
coord_map(projection = "mercator") +
ggtitle("Mercator Projection")
grid.arrange(default, mercator, ncol=2)
install.packages("readr")
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv")
library("readr", lib.loc="~/R/win-library/3.3")
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv")
head(casedf)
colnames(df)
colnames(casedf)
unique(casedf$category)
unique(casedf$Category)
unique(casedf$"Supervisor District")
library("dplyr", lib.loc="~/R/win-library/3.3")
casedf = casedf %>%
select('Supervisor District', Category) %>%
filter (Category == "Noise Report") %>%
group_by('Supervisor District') %>%
summarise(n=n())
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv")
View(casedf)
View(casedf)
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=(CaseID,Opened,Closed,Updated,Status,"Status Notes", "Responsible Agency", Category, "Request Type", "Request Details", Address. "Supervisor District", Neighborhood, Point, Source, "Media URL")
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=("CaseID","Opened","Closed","Updated","Status","Status Notes", "Responsible Agency", "Category", "Request Type", "Request Details", "Address", "Supervisor District", "Neighborhood", "Point", "Source", "Media URL")
?names
View(casedf)
View(casedf)
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=("CaseID","Opened","Closed","Updated","Status","Status Notes", "Responsible Agency", "Category", "Request Type", "Request Details", "Address", "Supervisor District", "Neighborhood", "Point", "Source", "Media URL"))
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=list("CaseID","Opened","Closed","Updated","Status","Status Notes", "Responsible Agency", "Category", "Request Type", "Request Details", "Address", "Supervisor District", "Neighborhood", "Point", "Source", "Media URL"))
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=list(abcdefghijklm))
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", names=list("abcdefghijklm"))
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv")
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", Header=TRUE)
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", header=TRUE)
?read_scv
?read_csv
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata.csv", col_names=TRUE)
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata22.csv")
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata2.csv")
View(casedf)
casedf = casedf %>%
select('Supervisor District', Category) %>%
filter (Category == "Noise Report") %>%
group_by('Supervisor District') %>%
summarise(n=n())
casedf = casedf %>%
select_('Supervisor District', Category) %>%
filter (Category == "Noise Report") %>%
group_by('Supervisor District') %>%
summarise(n=n())
casedf = casedf %>%
select_('Supervisor District', 'Category') %>%
filter (Category == "Noise Report") %>%
group_by('Supervisor District') %>%
summarise(n=n())
casedf = casedf %>%
select(one_of('Supervisor District"), Category) %>%
filter (Category == "Noise Report") %>%
group_by('Supervisor District') %>%
casedf = casedf %>%
select(one_of('Supervisor District"), Category) %>%
filter (Category == "Noise Report") %>%
group_by(one_of('Supervisor District')) %>%
colnames(casedf) <- c("CaseID","Opened","Updated", "Status", "StatusNotes", "ResponsibleAgency", "Category", "RequestType", "RequestDetails", "Address",  "SupervisorDistrict", "Neighborhood", "Point", "Source")
casedf = casedf %>%
select(SupervisorDistrict, Category) %>%
filter (Category == "Noise Report") %>%
group_by('SupervisorDistrict') %>%
summarise(n=n())
casedf=read_csv("C:/Users/beales/Desktop/Arimaps/casedata2.csv")
colnames(casedf) <- c("CaseID","Opened","Updated", "Status", "StatusNotes", "ResponsibleAgency", "Category", "RequestType", "RequestDetails", "Address",  "SupervisorDistrict", "Neighborhood", "Point", "Source")
casedfsum = casedf %>%
select(SupervisorDistrict, Category) %>%
filter (Category == "Noise Report") %>%
group_by('SupervisorDistrict') %>%
summarise(n=n())
View(casedfsum)
casedfsum = casedf %>%
select(SupervisorDistrict, Category)
casedfsum = casedfsum %>%
filter (Category == "Noise Report") %>%
group_by('SupervisorDistrict') %>%
summarise(n=n())
casedfsum = casedf %>%
select(SupervisorDistrict, Category)
casedfsum = casedf %>%
filter (Category == "Noise Report")
casedfsum = casedfsum %>%
group_by('SupervisorDistrict') %>%
summarise(n=n())
casedfsum = casedf %>%
select(SupervisorDistrict, Category)
casedfsum = casedfsum %>%
filter (Category == "Noise Report")
casedfsum = casedfsum %>%
group_by('SupervisorDistrict')
casedfsum = casedf %>%
select(SupervisorDistrict, Category)
casedfsum = casedfsum %>%
filter (Category == "Noise Report") %>%
group_by(SupervisorDistrict)
casedfsum = casedfsum %>%
summarise(n=n())
casedfsum
gpclibPermit()
sf@data$id = rownames(sf@data)
sf.points = fortify(sf, region="id")
sf.df = inner_join(sf.points, sf@data, by="id")
# Step 3: render the shapefiles / data frame with ggplot2
ggplot(sf.df, aes(long,lat,group=group)) +
geom_polygon()
View(sf.df)
final.df = inner_join(sf.df, casedfsum, by c("supervisor" = "SupervisorDistrict"))
final.df = inner_join(sf.df, casedfsum, by=c("supervisor" = "SupervisorDistrict"))
View(final.df)
ggplot(final.df, aes(long, lat, group=group, fill=n)) +
geom_polygon()
setwd("C:/Users/beales/Desktop/himaps")
sf = readOGR(dsn=".", layer="ahupuaa")
sf = readOGR(dsn=".", layer="ahupuaa")
ls
getwd()
sf = readOGR(dsn=".", layer="ahupuaa")
setwd("C:/Users/beales/Desktop/himaps/")
sf = readOGR(dsn=".", layer="ahupuaa")
library("rgdal", lib.loc="~/R/win-library/3.3")
sf = readOGR(dsn=".", layer="ahupuaa")
ahsf = readOGR(dsn=".", layer="ahupuaa")
?readOGR
ahsf = readOGR(dsn=".", layer="ahupuaa")
ahsf = readOGR(dsn=".", layer="ahupuaa")
dir
dir(pant=".")
dir(path=".")
getwd()
setwd("C:/Users/beales/Desktop/himaps/ahupuaashp")
getwd()
higeo = readOGR(dsn=".", layer="ahupuaa")
library("proj4", lib.loc="~/R/win-library/3.3")
library("rgdal", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
library("ggplot2", lib.loc="~/R/win-library/3.3")
higeo = readOGR(dsn=".", layer="ahupuaa")
higeo@data$id = rownames(higeo@data) #add row numbers as a column
higeo.points = fortify(higeo, region="id") #pull point data from each “region”
View(higeo.points)
View(higeo.points)
higeo.df = inner_join(higeo.points, higeo@data, by="id") #join individual points back to data via id field
colnames(higeo.df)[1:2] <- c("easting","northing")
View(higeo.df)
View(higeo.df)
higeo.df$rowid = rownames(higeo.df) #begin again, add “rowid”  this time.
hicoords <- data.frame(x=higeo.df$easting, y=higeo.df$northing) #create xy values in new df, because proj4 only handles 2 columns
View(hicoords)
View(hicoords)
proj4string <- "+proj=utm +zone=4 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs"#define proj4string to contain constants
hiconv <- project(hicoords, proj4string, inv=TRUE)#converts to lat long
?project
hiconv <- project(hicoords, proj4string, inverse=TRUE)#converts to lat long
hiconv <- project(hicoords, proj4string)#converts to lat long
hiconv <- project(hicoords, proj4string, inverse=TRUE)#converts to lat long
higeo= readOGR(dsn=".", layer="FILENAME HERE") #Read in shape file
higeo= readOGR(dsn=".", layer="ahupuaa") #Read in shape file
higeo@data$id = rownames(higeo@data) #add row numbers as a column
higeo.points = fortify(higeo, region="id") #pull point data from each “region”
higeo.df = inner_join(higeo.points, higeo@data, by="id") #join individual points back to data via id field
colnames(higeo.df)[1:2] <- c("easting","northing")
higeo.df$rowid = rownames(higeo.df) #begin again, add “rowid”  this time.
View(higeo.df)
View(higeo.df)
hicoords <- data.frame(x=higeo.df$easting, y=higeo.df$northing) #create xy values in new df, because proj4 only handles 2 columns
View(hicoords)
View(hicoords)
proj4string <- "+proj=utm +zone=4 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs"#define proj4string to contain constants
detach("package:proj4", unload=TRUE)
hiconv <- project(hicoords, proj4string, inverse=TRUE)#converts to lat long
hiconv <- project(hicoords, proj4string)#converts to lat long
sapply(hicoords, class)
hiconv <- project(hicoords, proj4string, inverse= "TRUE")#converts to lat long
hiconv <- project(hicoords, proj4string)#converts to lat long
library("proj4", lib.loc="~/R/win-library/3.3")
hiconv <- project(hicoords, proj4string, inverse= "TRUE")#converts to lat long
hiconv.df <- data.frame(hiconv)
View(hiconv.df)
hiconv.df$rowid = rownames(hiconv.df)# add rownames as column
newhi.df <- inner_join(hiconv.df, higeo.df, by="rowid") #rejoin dfs by rowid
colnames(newhi.df)[1:2] <- c("lon","lat") #rename x and y columns
View(newhi.df) #join to original data.frame
default = ggplot(newhi.df) +
aes(lon,lat,group=group) +
geom_polygon() +
ggtitle("Default Projection")
default
save.image("C:/Users/beales/Desktop/himaps/ahupuaashp/newhist.RData")
