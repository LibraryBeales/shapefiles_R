install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
View(country.map)
data("df_japan_census")
View(df_japan_census)
admin1_map("japan")
admin1_choropleth(country.name = "japan", df= df_japan_census)
?admin1_choropleth
data("country.map")
View(country.map)
data("admin1.map")
View(admin1.map)
View(admin1.map)
data("admin1.regions")
View(admin1.regions)
?choroplethr
??choroplethr
detach("package:choroplethrAdmin1", unload=TRUE)
admin1_map("japan")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
?choroplethrAdmin1
??choroplethrAdmin1
?choroplethrAdmin1
?admin1.regions
?admin1_choropleth
admin1_choropleth("japan")
data(“admin1.regions”)
data(admin1.regions)
View(admin1.regions)
admin1_choropleth("Japan", df_pop_zip)
admin1_choropleth("japan", df_pop_zip)
admin1_choropleth("japan")
View(df_japan_census)
df_japan_census$value=df_japan_census$pop_2010
View(df_japan_census)
View(admin1.regions)
?choroplethr
View(df_japan_census)
admin1_choropleth(“japan”, df_japan_census)
admin1_choropleth(“japan, df_japan_census)
admin1_choropleth("japan", df_japan_census)
kansai = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom         = kansai)
View(admin1.regions)
?admin1.regions
?c
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom = ("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom         = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom         = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga"))
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom         = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga"))
admin1_choropleth("japan", df_japan_census)
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates - Kansai Region",
legend       = "Population",
zoom         = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga"))
library("acs", lib.loc="~/R/win-library/3.2")
api.key.install(16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8, file="key.rda")
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key.rda")
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
county_choropleth_acs("B19301")
remove(choro)
View(state.regions)
county_choropleth_acs("B06009",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B06009",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B060092",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
library("acs", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
county_choropleth_acs("B19301",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("S1701",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("S1701")
county_choropleth_acs("S17001")
county_choropleth_acs("B09019")
county_choropleth_acs("B09019",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B19301",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
state_choropleth_acs("STC005")
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
state_choropleth_acs("STC005")
county_choropleth_acs("B19301",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
library("dplyr", lib.loc="~/R/win-library/3.2")
state_choropleth_acs("STC005")
county_choropleth_acs("B09019",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B060092",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B06009",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B15003",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B06009",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
zip_choropleth_acs("B06009",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B01001",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
county_choropleth_acs("B01003",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
choro = county_choropleth_acs("B01003",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
choro2 = county_choropleth_acs("B19301",state_zoom = c("new york", "new jersey", "pennsylvania", "connecticut"))
grid.arrange(choro$render(), choro2$render(), ncol = 2)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggmap", lib.loc="~/R/win-library/3.2")
grid.arrange(choro$render(), choro2$render(), ncol = 2)
??grid.arrange
?grid.arrange
library("gridExtra", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggmap", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("acs", lib.loc="~/R/win-library/3.2")
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
grid.arrange(choro$render(), choro2$render(), ncol = 2)
?"grid.arrange"
library("gtable", lib.loc="~/R/win-library/3.2")
install.packages("gridBase")
library("acs", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("ggmap", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("gridBase", lib.loc="~/R/win-library/3.2")
library("gridExtra", lib.loc="~/R/win-library/3.2")
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
grid.arrange(choro$render(), choro2$render(), ncol = 2)
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
grid.arrange(arrangeGrob(choro$render(), choro2$render()), ncol = 2)
choro$render()
arrangeGrob(choro$render(), choro2$render()), ncol = 2)
grid.arrange(arrangeGrob(choro$render(), choro2$render()), ncol = 2)
grid.arrange(arrangeGrob(choro, choro2)), ncol = 2)
grid.arrange(arrangeGrob("choro","choro2")), ncol = 2)
grid.arrange(arrangeGrob(choro$render(), choro2$render()), ncol = 2)
old.par <- par(mfrow=C(1,2))
old.par <- par(mfrow=C(1, 2))
print(choro, position = c(0,0,0.5,1), more=TRUE)
print(choro2, position = c(0.5,0,1,1))
print(choro, vp = viewport(layout.pos.row = 1, layout.pos.col = 1)
print(choro2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print("choro", vp = viewport(layout.pos.row = 1, layout.pos.col = 1)
print(choro2, position = c(0.5,0,1,1))
print("choro", vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print("choro2", vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(choro, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(choro2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
pushViewport(viewport(layout = grid.layout(1, 2)))
print(choro, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(choro2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
pushViewport(viewport(layout = grid.layout(1, 2)))
pushViewport(viewport(layout = grid.layout(1, 2)))
print(choro, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(choro2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
install.packages(c("rworldmap", "mapproj"))
library("rworldmap", lib.loc="~/R/win-library/3.2")
routes <-read.csv("http://github/jpakotal/openflights/data/routes.dat ")
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat")
View(routes)
head(routes)
?"plot"
?points
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(-20, 59),
ylim = c(35, 71),
asp = 1
)
library("ggmap", lib.loc="~/R/win-library/3.2")
europe.limits <- geocode(c("CapeFligely,RudolfIsland,Franz Josef Land,Russia",
"Gavdos,Greece",
"Faja Grande,Azores",
"SevernyIsland,Novaya Zemlya,Russia")
)
View(df_pop_zip)
View(europe.limits)
View(europe.limits)
> plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
plot(newmap, xlim = range(europe.limits$lon), ylim = range(europe.limits$lat),asp = 1)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
View(routes)
View(routes)
head(routes)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat")
airports <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat")
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
View(airports)
airports <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat", header = FALSE)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
?read.csv
head(airports)
head(airports)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
> points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = 1)
points(airports$lon, airports$lat, col = "red", cex = .3)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .3)
points(airports$lon, airports$lat, col = "red", cex = .6)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
points(airports$lon, airports$lat, col = "red", cex = .6)
departures <- ddply(routes, .(sourceAirportID), "nrow")
library("plyr", lib.loc="~/R/win-library/3.2")
?ddply
departures <- ddply(routes, .(sourceAirportID), "nrow")
View(routes)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes", header = FALSE)
routes <-read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat", header = FALSE)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
View(routes)
departures <- ddply(routes, .(sourceAirportID), "nrow")
View(departures)
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
View(arrivals)
View(departures)
names(departures)[2] <- "flights"
names(arrivals)[2] <- "flights"
View(arrivals)
airportD <- merge(airports, departures, by.x = "ID", by.y = "sourceAirportID")
airportA <- merge(airports, arrivals, by.x = "ID", by.y = "destinationAirportID")
View(airportA)
View(airportD)
View(airportD)
map <- get_map(location = 'Europe', zoom = 4)
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
?scale_size_area
mapPointsLegend <- mapPoints +
scale_size_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = (flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_size_area(breaks = (c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_size_area(breaks = (c(sqrt(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend <- mapPoints +
scale_size_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
> points(airports$lon, airports$lat, col = "red", cex = .6)
points(airports$lon, airports$lat, col = "red", cex = .6)
View(df_pop_state)
View(routes)
View(routes) #views routes
?ddply
?GeomPoint
?geom_point
mapPointsLegend
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
data("df_japan_census")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
View(df_japan_census)
View(df_japan_census)
df_japan_census$value=df_japan_census$pop_2010
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
admin1_choropleth(country.name = "japan",
legend       = "Population")
admin1_choropleth(country.name = "japan",
title        = "2010 Japan Population Estimates",
legend       = "Population")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
admin1_choropleth(country.name = "japan",
legend       = "Population")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
admin1_choropleth(country.name = "japan",
legend       = "Population")
admin1_choropleth(country.name = "japan",
df           = df_japan_census,
title        = "2010 Japan Population Estimates",
legend       = "Population")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
zip_choropleth(df_pop_zip, state_zoom="hawaii", title="2012 Hawaii State ZCTA Population EStimates", legend="Population")
zip_choropleth(df_pop_zip, state_zoom="hawaii", title="2012 Hawaii State ZCTA Population EStimates", legend="Population")
view county.fips.numeric
data county.fips.numeric
county.fips.numeric
data (county.fips.numeric)
data("county.regions")
View(county.regions)
View(county.regions)
zip_choropleth(df_pop_zip, county_zoom="15003", title="2012 Honolulu ZCTA Population EStimates", legend="Population")
library("choroplethr", lib.loc="~/R/win-library/3.2")
install.packages(c("acepack", "acs", "assertthat", "BH", "choroplethr", "choroplethrAdmin1", "choroplethrMaps", "colorspace", "curl", "DBI", "devtools", "digest", "dplyr", "evaluate", "fields", "geosphere", "ggmap", "ggplot2", "git2r", "gridExtra", "gtable", "Hmisc", "httr", "jsonlite", "latticeExtra", "lazyeval", "maps", "maptools", "memoise", "mgcv", "mime", "munsell", "plyr", "proto", "R6", "Rcpp", "reshape2", "RgoogleMaps", "roxygen2", "rstudioapi", "rversions", "scales", "sp", "spam", "stringi", "stringr", "withr", "XML", "xml2"))
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethr", lib.loc="~/R/win-library/3.2")
library("WDI", lib.loc="~/R/win-library/3.2")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethrAdmin1", lib.loc="~/R/win-library/3.2")
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
library("choroplethrZip", lib.loc="~/R/win-library/3.2")
library("choroplethr", lib.loc="~/R/win-library/3.2")
install.packages("rgdal")
update()
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
install.packages(c("choroplethr", "choroplethrAdmin1", "choroplethrMaps"))
library("choroplethr", lib.loc="~/R/win-library/3.3")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("WDI", lib.loc="~/R/win-library/3.3")
choroplethr_wdi(code="NY.GDP.PCAP.CD", year=2012, title="2012 Per Capita Income")
library("choroplethr", lib.loc="~/R/win-library/3.3")
library("choroplethr", lib.loc="~/R/win-library/3.3")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8", file="key")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
api.key.install("16bb05f7feacb1108ae64eeadaaf0e39fc9eb3c8")
manhattan_2010 = get_tract_demographics("new york", county_fips=36061, endyear = 2010, span = 5)
manhattan_2010$value = manhattan_2010$median_rent
m1 = tract_choropleth(manhattan_2010, "new york", legend = "Dollars", county_zoom = 36061)
m2 = tract_choropleth(manhattan_2010, "new york", legend = "Dollars", county_zoom = 36061, reference_map = TRUE)
remove(country.map, df_county_demographics, df_japan_census, df_pop_county, df_pop_state, df_pop_zip)
higeo= readOGR(dsn=".", layer="ahupuaa")
library("rgdal", lib.loc="~/R/win-library/3.3")
higeo= readOGR(dsn=".", layer="ahupuaa")
higeo= readOGR(dsn=".", layer="ahupuaa")
getwd()
setwd("C:/Users/beales/Desktop/himaps/ahupuaashp")
higeo= readOGR(dsn=".", layer="ahupuaa")
higeo@data$id = rownames(sf@data) #add row numbers as a column
higeo@data$id = rownames(higeo@data) #add row numbers as a column
higeo.points = fortify(higeo, region="id") #pull point data from each “region”
library("ggplot2", lib.loc="~/R/win-library/3.3")
higeo.points = fortify(higeo, region="id") #pull point data from each “region”
higeo.df = inner_join(higeo.points, higeo@data, by="id") #join individual points back to data via id field
library("dplyr", lib.loc="~/R/win-library/3.3")
higeo.df = inner_join(higeo.points, higeo@data, by="id") #join individual points back to data via id field
higeo.df$rowid = rownames(higeo.df)
hicoords <- data.frame(x=higeo.df$lon, y=higeo.df$lat) #create xy values in new df, because proj4 only handles 2 columns
proj4string <- "+proj=utm +zone=4 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs"#define proj4string to contain constants
hiconv <- project(hicoords, proj4string, inverse=TRUE)#converts to lat long
hiconv <- project(hicoords, proj4string)#converts to lat long
lapply(hicoords, class)
View(hicoords)
hiconv <- project(hicoords, proj4string, inverse=TRUE)
?project
hiconv <- project(hicoords, proj4string, inv=TRUE)
library("proj4", lib.loc="~/R/win-library/3.3")
hiconv <- project(hicoords, proj4string, inverse=TRUE)
library("plyr", lib.loc="~/R/win-library/3.3")
detach("package:plyr", unload=TRUE)
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="~/R/win-library/3.3")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.3")
> hiconv.df$rowid = rownames(hiconv.df)# add rownames as column
hiconv.df$rowid = rownames(hiconv.df)# add rownames as column
hiconv$rowid = rownames(hiconv)# add rownames as column
hiconv$rowid = rownames(hiconv)
hiconv
> hiconv.df <- data.frame(hiconv)
hiconv.df <- data.frame(hiconv)
hiconv.df$rowid = rownames(hiconv.df)
newhi.df <- inner_join(hiconv.df, higeo.df, by="rowid")
View(newhi.df)
View(higeo.df)
colnames(higeo.df)[1:2] <- c("easting","northing")
higeo= readOGR(dsn=".", layer="ahupuaa")
higeo@data$id = rownames(higeo@data)
higeo.points = fortify(higeo, region="id")
higeo.df = inner_join(higeo.points, higeo@data, by="id")
colnames(higeo.df)[1:2] <- c("easting","northing")
higeo.df$rowid = rownames(higeo.df)
hicoords <- data.frame(x=higeo.df$easting, y=higeo.df$northing)
proj4string <- "+proj=utm +zone=4 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
hiconv <- project(hicoords, proj4string, inv=TRUE)
hiconv <- project(hicoords, proj4string, inverse=TRUE)
detach("package:proj4", unload=TRUE)
library("proj4", lib.loc="~/R/win-library/3.3")
hiconv <- project(hicoords, proj4string, inverse=TRUE)
hiconv.df <- data.frame(hiconv)
hiconv.df$rowid = rownames(hiconv.df)
newhi.df <- inner_join(hiconv.df, higeo.df, by="rowid")
View(newhi.df)
colnames(newhi.df)[1:2] <- c("lon","lat")
View(newhi.df)
newhi.df[,-3]
View(newhi.df)
newhi.df <- newhi.df[,-3]
View(newhi.df)
higeo= readOGR(dsn=".", layer="ahupuaa")
head(higeo@coords)
head(higeo@data)
higeo@data$id = rownames(higeo@data)
head(higeo@data)
higeo.points = fortify(higeo, region="id")
View(higeo.points)
higeo.df = inner_join(higeo.points, higeo@data, by="id")
colnames(higeo.df)[1:2] <- c("easting","northing")
View(higeo.df)
higeo.df <-subset(higeo.df, easting != "" | northing != "")
higeo.df$rowid <- 1:nrow(higeo.df)
View(higeo.df)
coords <- cbind(easting = as.numeric(as.character(higeo.df$easting)), northing = as.numeric(as.character(higeo.df$northing)))
higrid = "+init=espg:15134"
latlong = "+init=espg:4326"
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:15134"))
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:27700"))
install.packages("rgdal")
library("proj4", lib.loc="~/R/win-library/3.3")
library("rgdal", lib.loc="~/R/win-library/3.3")
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:15134"))
library("sp", lib.loc="~/R/win-library/3.3")
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:15134"))
update.packages("sp")
update.packages(sp)
update.packages("sp")
update.packages()
library("sp", lib.loc="~/R/win-library/3.3")
library("proj4", lib.loc="~/R/win-library/3.3")
library("rgdal", lib.loc="~/R/win-library/3.3")
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:15134"))
proj4string
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = ("+proj=utm +zone=4 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string)
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df$rowid), proj4string)
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df), proj4string = CRS("+init=espg:15134"))
higeo.sdf <- SpatialPointsDataFrame(coords, data = data.frame(higeo.df))
plot(higeo.sdf)
head(higeo.sdf@data)
higeoll <- spTransform(higeo.sdf, CRS(latlong))
savehistory("C:/Users/beales/Desktop/himaps/ahupuaashp/history1.Rhistory")
